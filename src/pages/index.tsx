import { channel } from 'diagnostics_channel'
import type { NextPage } from 'next'
import { signIn, signOut, useSession } from 'next-auth/react'
import Head from 'next/head'
import Pusher from 'pusher-js'
import { useEffect, useState } from 'react'
import QRCode from 'react-qr-code'

import QRScan from 'components/QRScan'
import { trpc } from 'utils/trpc'

const btn =
  'bg-slate-900 hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 focus:ring-offset-slate-50 text-white font-semibold h-12 px-6 rounded-lg w-full flex items-center justify-center sm:w-auto dark:bg-sky-500 dark:highlight-white/20 dark:hover:bg-sky-400'

const pusher = new Pusher('8ff0f687dcfc83a4b27b', {
  cluster: 'eu',
})

const Home: NextPage = () => {
  const { data, status } = useSession()
  const [provider, setProvider] = useState('')
  const [email, setEmail] = useState('')
  const phone = trpc.useMutation('example.phone')
  const qrlogin = trpc.useMutation('example.qrlogin')
  const codee = trpc.useMutation('example.qr', {
    onSuccess(data) {
      setProvider('qr:1-' + data)
    },
  })

  useEffect(() => {
    if (!provider.includes('qr:1-')) return
    const code = provider.split('-')[1]

    const channel = pusher.subscribe('test-login-qr')
    channel.bind('login:' + code, function (data: { message: string }) {
      const [email, password] = data.message.split(':')
      signIn('credentials', { email, password })
    })

    return () => pusher.unsubscribe('test-login-qr')
  }, [provider])

  const onFind = (value: string) => {
    setProvider('')
    qrlogin.mutate(value)
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="bg-brand h-12 items-center flex fixed w-screen">
        <div className="container mx-auto text-lg px-2">Activities</div>
      </nav>
      <main className="flex bg-white flex-col px-2 dark:bg-black dark:text-white gap-3">
        <div className="h-12"></div>
        <div className="container mx-auto flex flex-col flex-1 gap-3">
          <h2 className="text-5xl">
            Activities | {status} | {data?.user?.email}
          </h2>
          {provider.includes('qr:1-') && (
            <div style={{ height: 'auto', margin: '0 auto', maxWidth: 256, width: '100%' }}>
              <QRCode
                size={256}
                style={{ height: 'auto', maxWidth: '100%', width: '100%' }}
                value={provider.split('-')[1] || ''}
                // eslint-disable-next-line
                // @ts-ignore
                viewBox={`0 0 256 256`}
              />
            </div>
          )}
          {provider === 'qr:scan' && (
            <div className="border-solid border-2 border-indigo-500 h-64 overflow-hidden">
              <QRScan onFind={onFind} />
            </div>
          )}
          {provider === '' && status !== 'authenticated' && (
            <button className={btn} onClick={() => codee.mutate()}>
              login with QR
            </button>
          )}
          {provider === '' && status !== 'authenticated' && (
            <button onClick={() => signIn('github')} className={btn}>
              login with github
            </button>
          )}
          {provider === '' && status !== 'authenticated' && (
            <button className={btn} onClick={() => setProvider('phone:1')}>
              login with phone
            </button>
          )}
          {provider === 'phone:1' && (
            <div className="flex gap-4">
              <input
                value={email}
                placeholder="phone"
                onChange={(e) => setEmail(e.target.value)}
                className="focus:ring-2 focus:ring-blue-500 focus:outline-none appearance-none w-full text-normal text-slate-900 placeholder-slate-400 rounded-md p-2 ring-1 ring-slate-200 shadow-sm"
              />
              <button
                onClick={() => {
                  setProvider('phone:2')
                  phone.mutate(email)
                  setEmail('')
                }}
                className={btn + ' shrink-0'}
              >
                send code
              </button>
            </div>
          )}
          {provider === 'phone:2' && (
            <div className="flex gap-4">
              <input
                value={email}
                placeholder="code"
                onChange={(e) => setEmail(e.target.value)}
                className="focus:ring-2 focus:ring-blue-500 focus:outline-none appearance-none w-full text-normal text-slate-900 placeholder-slate-400 rounded-md p-2 ring-1 ring-slate-200 shadow-sm"
              />
              <button
                onClick={() => signIn('credentials', { email: '7jagjag@gmail.com', password: email })}
                className={btn + ' shrink-0'}
              >
                login
              </button>
            </div>
          )}
          {status === 'authenticated' && (
            <button className={btn} onClick={() => signOut()}>
              logout
            </button>
          )}
          {provider === '' && status === 'authenticated' && navigator.userAgent.includes('iPhone') && (
            <button className={btn} onClick={() => setProvider('qr:scan')}>
              SCAN
            </button>
          )}
        </div>
      </main>
    </>
  )
}

export default Home
